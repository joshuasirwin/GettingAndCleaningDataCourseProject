add2 <- function(x, y) {
x + y
}
add2(3,5)
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean(airquality)
args(paste)
cube <- function(x, n){
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <-0
}
rm(list = ls())
x <- 1:10
if(x > 5) {
x <-0
}
rm(list = ls())
f <- function(x) {
g <- function(y) {
y+z
}
z <- 4
x + g(x)
}
z <-10
f(3)
rm(list = ls())
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
rm(list = ls())
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- (z - 1)^2
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_dev
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls
ls()
x <- 9
ls()
list.files()
dir
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create(mytest.R)
file.create("mytest.R")
ls()
list.file()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink('testdir2')
unlink('testdir2', recursive = TRUE)
setwd(old.dir)
unlink('testdir', recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- (0.5, 55, -10, 6)
num_vect <- 0.5, 55, -10, 6
num_vect <- 0.5, 55, -10, 6
num_vect <- 0.5
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect <1
tf
num_vect >= 6
c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "josh")
c(paste(my_char, collapse = " "), "josh")
my_name <- c(my_char, "Josh")
my_name
past(my_name, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("x, "y", "z"), sep = "")
paste(1:3)
paste(1:3, c("x, "y", "z"), sep = "")
paste(1:3, c("x", "y", "z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
is.na()
is.na(1)
my_na <- is.na(my_data)
my_na
my_na <- my_data == "NA"
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
library(httr)
direccion <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
archivo <- "ss06hid.csv"
download.file(direccion, archivo, method="curl")
data <- read.csv("ss06hid.csv")
logicalvector <- data$ACR==3 & data$AGS==6
first3 <- which(logicalvector)[1:3] # which() treats NAs as FALSE
first3
library(jpeg)
direccion2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
archivo2 <- "jeff.jpg"
download.file(direccion2, archivo2, method="curl")
foto <- readJPEG("jeff.jpg", native = TRUE)
quantile(foto)
library(jpeg)
direccion2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
archivo2 <- "jeff.jpg"
download.file(direccion2, archivo2, method="curl")
foto <- readJPEG("jeff.jpg", native = TRUE)
quantile(foto)
library(data.table)
direccion3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
archivo3 <- "GDP.csv"
download.file(direccion3, archivo3, method="curl")
GDP <- data.table(read.csv("GDP.csv", skip = 4, nrows = 191))
GDP <- GDP[X != ""]
GDP <- GDP[, list(X, X.1, X.3, X.4)]
setnames(GDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "GDP"))
direccion4 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
archivo4 <- "EDSTATS_Country.csv"
download.file(direccion4, archivo4, method="curl")
EDSTATS <- data.table(read.csv("EDSTATS_Country.csv"))
data2 <- merge(GDP, EDSTATS, all = TRUE, by = c("CountryCode"))
sum(!is.na(unique(data2$rankingGDP)))
data2[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, GDP)][13]
library(jpeg)
direccion2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
archivo2 <- "jeff.jpg"
download.file(direccion2, archivo2, method="curl")
foto <- readJPEG("jeff.jpg", native = TRUE)
quantile(foto)
echo "# GettingAndCleaningDataCourseProject" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/joshuasirwin/GettingAndCleaningDataCourseProject.git
git push -u origin master
echo "# GettingAndCleaningDataCourseProject" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/joshuasirwin/GettingAndCleaningDataCourseProject.git
git push -u origin master
echo "# GettingAndCleaningDataCourseProject" >> README.md
echo "# GettingAndCleaningDataCourseProject" >> README.md
echo "# GettingAndCleaningDataCourseProject" >> README.md
echo "# CourseProject" >> README.md
git init
dir
git init
git remote add origin https://github.com/joshuasirwin/GettingAndCleaningDataCourseProject.git
git init
which git
git --version
git
ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
brew install git
ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
L
git
which git
best<-function(state,outcome){
git
which git
/usr/bin/git
which /usr/bin/git
gc()
which /usr/bin/git
which /usr/bin/git
which /usr/bin/git
git
getwd()
git
/usr/local/bin/git
git
dir
dir()
setwd("Github")
dir
dir()
setwd("GettingAndCleaningDataCourseProject")
dir()
for (s in 1:nS) {
#!/usr/bin/env Rscript
## Read data sets and combine
testData <- read.table("sourceData/test/X_test.txt")
trainData <- read.table("sourceData/train/X_train.txt")
X <- rbind(testData, trainData)
## Garbage collection
rm(testData)
rm(trainData)
## Read subjects and combine
testSub <- read.table("sourceData/test/subject_test.txt")
trainSub <- read.table("sourceData/train/subject_train.txt")
S <- rbind(testSub, trainSub)
## Garbage collection
rm(testSub)
rm(trainSub)
## Read in data labels and combine
testLabel <- read.table("sourceData/test/y_test.txt")
trainLabel <- read.table("sourceData/train/y_train.txt")
Y <- rbind(testLabel, trainLabel)
## Garbage collection
rm(testLabel)
rm(trainLabel)
## Read Features List (to be used as column names for data)
featuresList <- read.table("sourceData/features.txt", stringsAsFactors=FALSE)
## Use only names from features list
features <- featuresList$V2
## Logical Vector to keep only std and mean columns
keepColumns <- grepl("(std|mean[^F])", features, perl=TRUE)
## Keep only data we want, and name it human readable
X <- X[, keepColumns]
names(X) <- features[keepColumns]
names(X) <- gsub("\\(|\\)", "", names(X))
names(X) <- tolower(names(X))
## Read ActivityList (to add descriptive names to data set)
activities <- read.table("sourceData/activity_labels.txt")
activities[,2] = gsub("_", "", tolower(as.character(activities[,2])))
Y[,1] = activities[Y[,1], 2]
names(Y) <- "activity" ## Add activity label
## Add human readable labels to activity names
names(S) <- "subject"
tidyData <- cbind(S, Y, X)
write.table(tidyData, "tidyData.txt")
## Create second tiny data set with avg of each var for each act and each sub
uS = unique(S)[,1]
nS = length(uS)
nA = length(activities[,1])
nC = length(names(tidyData))
td = tidyData[ 1:(nS*nA), ]
row = 1
for (s in 1:nS) {
for (a in 1:nA) {
td[row,1] = uS[s]
td[row,2] = activities[a, 2]
tmp <- tidyData[tidyData$subject==s & tidyData$activity==activities[a,2],]
td[row, 3:nC] <- colMeans(tmp[, 3:nC])
row = row + 1
}
}
write.table(td, "tidyData2.txt")
write.table(td, "tidyData3.txt", row.name=FALSE)
#!/usr/bin/env Rscript
## Read data sets and combine
testData <- read.table("sourceData/test/X_test.txt")
trainData <- read.table("sourceData/train/X_train.txt")
X <- rbind(testData, trainData)
## Garbage collection
rm(testData)
rm(trainData)
## Read subjects and combine
testSub <- read.table("sourceData/test/subject_test.txt")
trainSub <- read.table("sourceData/train/subject_train.txt")
S <- rbind(testSub, trainSub)
## Garbage collection
rm(testSub)
rm(trainSub)
## Read in data labels and combine
testLabel <- read.table("sourceData/test/y_test.txt")
trainLabel <- read.table("sourceData/train/y_train.txt")
Y <- rbind(testLabel, trainLabel)
## Garbage collection
rm(testLabel)
rm(trainLabel)
## Read Features List (to be used as column names for data)
featuresList <- read.table("sourceData/features.txt", stringsAsFactors=FALSE)
## Use only names from features list
features <- featuresList$V2
## Logical Vector to keep only std and mean columns
keepColumns <- grepl("(std|mean[^F])", features, perl=TRUE)
## Keep only data we want, and name it human readable
X <- X[, keepColumns]
names(X) <- features[keepColumns]
names(X) <- gsub("\\(|\\)", "", names(X))
names(X) <- tolower(names(X))
## Read ActivityList (to add descriptive names to data set)
activities <- read.table("sourceData/activity_labels.txt")
activities[,2] = gsub("_", "", tolower(as.character(activities[,2])))
Y[,1] = activities[Y[,1], 2]
names(Y) <- "activity" ## Add activity label
## Add human readable labels to activity names
names(S) <- "subject"
tidyData <- cbind(S, Y, X)
write.table(tidyData, "tidyData.txt")
## Create second tiny data set with avg of each var for each act and each sub
uS = unique(S)[,1]
nS = length(uS)
nA = length(activities[,1])
nC = length(names(tidyData))
td = tidyData[ 1:(nS*nA), ]
row = 1
for (s in 1:nS) {
for (a in 1:nA) {
td[row,1] = uS[s]
td[row,2] = activities[a, 2]
tmp <- tidyData[tidyData$subject==s & tidyData$activity==activities[a,2],]
td[row, 3:nC] <- colMeans(tmp[, 3:nC])
row = row + 1
}
}
write.table(td, "tidyData2.txt")
write.table(td, "tidyData3.txt", row.name=FALSE)
dir()
run_analysis.R
#!/usr/bin/env Rscript
## Read data sets and combine
testData <- read.table("sourceData/test/X_test.txt")
trainData <- read.table("sourceData/train/X_train.txt")
X <- rbind(testData, trainData)
## Garbage collection
rm(testData)
rm(trainData)
## Read subjects and combine
testSub <- read.table("sourceData/test/subject_test.txt")
trainSub <- read.table("sourceData/train/subject_train.txt")
S <- rbind(testSub, trainSub)
## Garbage collection
rm(testSub)
rm(trainSub)
## Read in data labels and combine
testLabel <- read.table("sourceData/test/y_test.txt")
trainLabel <- read.table("sourceData/train/y_train.txt")
Y <- rbind(testLabel, trainLabel)
## Garbage collection
rm(testLabel)
rm(trainLabel)
## Read Features List (to be used as column names for data)
featuresList <- read.table("sourceData/features.txt", stringsAsFactors=FALSE)
## Use only names from features list
features <- featuresList$V2
## Logical Vector to keep only std and mean columns
keepColumns <- grepl("(std|mean[^F])", features, perl=TRUE)
## Keep only data we want, and name it human readable
X <- X[, keepColumns]
names(X) <- features[keepColumns]
names(X) <- gsub("\\(|\\)", "", names(X))
names(X) <- tolower(names(X))
## Read ActivityList (to add descriptive names to data set)
activities <- read.table("sourceData/activity_labels.txt")
activities[,2] = gsub("_", "", tolower(as.character(activities[,2])))
Y[,1] = activities[Y[,1], 2]
names(Y) <- "activity" ## Add activity label
## Add human readable labels to activity names
names(S) <- "subject"
tidyData <- cbind(S, Y, X)
write.table(tidyData, "tidyData.txt")
## Create second tiny data set with avg of each var for each act and each sub
uS = unique(S)[,1]
nS = length(uS)
nA = length(activities[,1])
nC = length(names(tidyData))
td = tidyData[ 1:(nS*nA), ]
row = 1
for (s in 1:nS) {
for (a in 1:nA) {
td[row,1] = uS[s]
td[row,2] = activities[a, 2]
tmp <- tidyData[tidyData$subject==s & tidyData$activity==activities[a,2],]
td[row, 3:nC] <- colMeans(tmp[, 3:nC])
row = row + 1
}
}
write.table(td, "tidyData2.txt")
write.table(td, "tidyData3.txt", row.name=FALSE)
